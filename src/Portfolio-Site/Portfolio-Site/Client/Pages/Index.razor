@page "/"
@page "/home"

@using PortfolioSite.Client.Helpers
@using Portfolio_Site.Client.Helpers
@using Portfolio_Site.Components
@using Portfolio_Site.Shared.Models

@inject IJSRuntime JSRuntime

<PageTitle>Caleb Frasier's Portfolio</PageTitle>

<Section id="home">
    <Splash ScrollSpeed="1" BackgroundScrollSpeed="-0.5" TitleScrollSpeed="0.25">
        <Background>
            <img src="/css/img/ocean-waves.jpg" class="filter-blur-2" />
        </Background>
        <Title>
            <div class="splash-block">
                <div class="splash-block-img"></div>
                <h1 class="splash-block-title"><span class="splash-accent-1">C</span>aleb <span class="splash-accent-2">F</span>rasier</h1>
                <div class="splash-block-subtitle">
                    <p>Software Engineer</p>
                    <p>Game Enthusiast</p>
                    <p>Weirdo</p>
                </div>
            </div>
        </Title>
    </Splash>
</Section>


<Section id="who-am-i">
    <Splash ScrollSpeed="1" BackgroundScrollSpeed="-0.25" TitleScrollSpeed="0.5">
        <Background>
            <img src="/css/img/clouds-sunset.jpg" class="filter-blur-1" />
        </Background>
        <Title>
            Who am I?
        </Title>
    </Splash>

    <Container Inline="true">
        <Card Orientation="Orientation.Horizontal" ImagePosition="ImagePosition.Right" Animated="true" Class="no-title" AnimatedImageSpeed="0.5" AnimatedBodySpeed="0.2">
            <CardBody>
                <blockquote>
                    Hi! Having grown up in the Pacific Northwest of the USA, I have naturally become used to a diverse environment with people of varying backgrounds and identities.
                    I attended <abbr title="Lane Community College">LCC</abbr> immediately after high school, staying for three years and earning two AAS degrees, one in each of Computer Programming and Computer Simulation & Game Design.
                    During my time at LCC, I started an internship at Dark Matter Consulting, which then transitioned into regular contract work. For the past several years I have worked on many projects through Dark Matter, focused mainly on Microsoft's .NET stack, as well as some React Native and NodeJS.
                </blockquote>
            </CardBody>
            <CardImage>
                <img src="imgs/IMG_20220924_201712_231.jpg" />
            </CardImage>
        </Card>
    </Container>
</Section>

<Section id="what-have-i-done">
    <Splash ScrollSpeed="1" BackgroundScrollSpeed="-0.25" TitleScrollSpeed="0.5">
        <Background>
            <img src="/css/img/feathers-blur.jpg" class="filter-blur-1" />
        </Background>
        <Title>
            What have I done?
        </Title>
    </Splash>

    <Container Inline="true" Class="tile-grid">
        <Tile BackgroundColor="var(--accent-3-100);">
            <TileImage>
                <img src="/css/img/dotnet-logo.png" />
            </TileImage>
            <TileHeader>
                This Website
            </TileHeader>
            <TileBody>
                This entire website was built from scratch using Blazor WASM, C#, HTML, CSS, and vanilla JavaScript.
            </TileBody>
        </Tile>
        <Tile BackgroundColor="var(--accent-3-100);">
            <TileImage>
                <img src="/css/img/blueprints-curve.jpg" />
            </TileImage>
            <TileHeader>
                Project 2
            </TileHeader>
            <TileBody>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
            </TileBody>
        </Tile>
        <Tile BackgroundColor="var(--accent-3-100);">
            <TileImage>
                <img src="/css/img/concrete-tree-shadow.jpg" />
            </TileImage>
            <TileHeader>
                Project 3
            </TileHeader>
            <TileBody>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
            </TileBody>
        </Tile>
        <Tile BackgroundColor="var(--accent-2-100);">
            <TileImage>
                <img src="/css/img/Responsive_Website_Design.jpg" />
            </TileImage>
            <TileHeader>
                Web Design
            </TileHeader>
            <TileBody>
                Responsive and accessible web design with custom, professional controls. Clear UX and security for business-to-business, stylish and unforgettable for business-to-customer.
            </TileBody>
        </Tile>
        <Tile BackgroundColor="var(--accent-1-100);">
            <TileImage>
                <img src="/css/img/server-racks.jpg" />
            </TileImage>
            <TileHeader>
                Database Design
            </TileHeader>
            <TileBody>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
            </TileBody>
        </Tile>
    </Container>
</Section>

<Section id="what-can-i-do">
    <Splash ScrollSpeed="1" BackgroundScrollSpeed="-0.25" TitleScrollSpeed="0.5">
        <Background>
            <img src="/css/img/painted-canvas.jpg" class="filter-blur-2" />
        </Background>
        <Title>
            What can I do?
        </Title>
    </Splash>

    <Container Class="m-block-0">
        <blockquote>
            With half a decade of professional experience and an unending passion for learning, anything I can't do, I'm eager to learn.
        </blockquote>
    </Container>

    <SectionHeader Title="Solutions" ContainerClass="bg-accent-1-7" TextClass="text-accent-1-1" />

    <Container Inline="true">
        <Tabs TabStyle="TabStyle.Card" Orientation="Orientation.Horizontal">
            <Tab Title="Front-End" Hoverable>
                Responsive and accessible web design with custom, professional controls. Clear UX and security for business-to-business, stylish and unforgettable for business-to-customer.
                <div class="flex row wrap">
                    <img src="/css/icons/html-5.svg" class="icon" />
                    <img src="/css/icons/css-3.svg" class="icon" />
                    <img src="/css/icons/less.svg" class="icon" />
                    <img src="/css/icons/sass.svg" class="icon" />
                    <img src="/css/icons/bootstrap.svg" class="icon" />
                    <img src="/css/icons/javascript.svg" class="icon" />
                    <img src="/css/icons/jquery-icon.svg" class="icon" />
                    <img src="/css/icons/express.svg" class="icon" />
                    <img src="/css/icons/react.svg" class="icon" />
                    <img src="/css/icons/xamarin.svg" class="icon" />
                    <img src="/css/icons/android-icon.svg" class="icon" />
                </div>
            </Tab>
            <Tab Title="Back-End" Hoverable>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
                <div class="flex row wrap">
                    <img src="/css/icons/c-sharp.svg" class="icon" />
                    <img src="/css/icons/dotnet.svg" class="icon" />
                    <img src="/css/icons/nodejs-icon.svg" class="icon" />
                    <img src="/css/icons/azure.svg" class="icon" />
                    <img src="/css/icons/swagger.svg" class="icon" />
                    <img src="/css/icons/gatsby.svg" class="icon" />
                    <img src="/css/icons/graphql.svg" class="icon" />
                    <img src="/css/icons/mongodb.svg" class="icon" />
                    <img src="/css/icons/mysql.svg" class="icon" />
                    <img src="/css/icons/oracle.svg" class="icon" />
                </div>
            </Tab>
            <Tab Title=".NET" Hoverable>
                Cross-platform solutions for both front-end and back-end with MVC or Blazor.
            </Tab>
            <Tab Title="Web Design" Hoverable>
                Responsive and accessible web design with custom, professional controls. Clear UX and security for business-to-business, stylish and unforgettable for business-to-customer.
            </Tab>
            <Tab Title="Database Design" Hoverable>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
            </Tab>
        </Tabs>
    </Container>

    <SectionHeader Title="Examples" ContainerClass="bg-accent-2-7" TextClass="text-accent-2-1" />

    <Container>
        <div class="flex row wrap">
            <Card Orientation="Orientation.Vertical" Size="Size.Full">
@*                <CardImage>
                    <img src="https://loremflickr.com/1280/720" />
                </CardImage>*@
                <CardTitle>
                    <h5>Buttons</h5>
                </CardTitle>
                <CardBody>
                    <p>Normal:</p>
                    <div class="flex row wrap">
                        <button class="btn primary">Primary</button>
                        <button class="btn accent-1">Accent 1</button>
                        <button class="btn accent-2">Accent 2</button>
                        <button class="btn accent-3">Accent 3</button>
                        <button class="btn success">Success</button>
                        <button class="btn danger">Danger</button>
                    </div>
                    <p>Outline:</p>
                    <div class="flex row wrap">
                        <button class="btn primary outline">Primary</button>
                        <button class="btn accent-1 outline">Accent 1</button>
                        <button class="btn accent-2 outline">Accent 2</button>
                        <button class="btn accent-3 outline">Accent 3</button>
                        <button class="btn success outline">Success</button>
                        <button class="btn danger outline">Danger</button>
                    </div>
                    <p>Large:</p>
                    <div class="flex row wrap">
                        <button class="btn primary large">Primary</button>
                        <button class="btn accent-1 large">Accent 1</button>
                        <button class="btn accent-2 large">Accent 2</button>
                        <button class="btn accent-3 large">Accent 3</button>
                        <button class="btn success large">Success</button>
                        <button class="btn danger large">Danger</button>
                    </div>
                    <p>Small:</p>
                    <div class="flex row wrap">
                        <button class="btn primary small">Primary</button>
                        <button class="btn accent-1 small">Accent 1</button>
                        <button class="btn accent-2 small">Accent 2</button>
                        <button class="btn accent-3 small">Accent 3</button>
                        <button class="btn success small">Success</button>
                        <button class="btn danger small">Danger</button>
                    </div>
                </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Form Controls
                </CardTitle>
                <CardBody>
                    <p>
                    </p>
                    <div class="flex row wrap">
                        <EditForm EditContext="editContext" OnValidSubmit="OnValidSudmit" OnInvalidSubmit="OnInvalidSubmit" class="@((isValidated ? "validated" : ""))">
                            <DataAnnotationsValidator />

                            <FormField For="@(() => formModel.Email)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.Email" />
                            </FormField>

                            <FormField For="@(() => formModel.Password)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.Password" type="password" />
                            </FormField>

                            <FormField For="@(() => formModel.DateOfBirth)" Context="fieldId">
                                <InputDate id="@fieldId" @bind-Value="@formModel.DateOfBirth" TValue="DateOnly" />
                            </FormField>

                            <FormField For="@(() => formModel.PhoneNumber)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.PhoneNumber" />
                            </FormField>

                            <FormField For="@(() => formModel.RememberMe)" Context="fieldId" Inline="true">
                                <Checkbox id="fieldId" @bind-Value="@formModel.RememberMe" />
                            </FormField>

                            <button class="btn accent-1 small" type="submit">Submit</button>
                            <button class="btn primary small" type="reset" @onclick="OnClear">Clear</button>
                        </EditForm>
                    </div>
            </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Collapseables
                </CardTitle>
                <CardBody>
                    <p>
                    </p>
                    <div class="flex row wrap">
                    </div>
                </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Carousel
                </CardTitle>
                <CardBody>
                    <p>
                    </p>
                    <div class="flex row wrap">
                    </div>
                </CardBody>
            </Card>
        </div>
    </Container>
</Section>

@code {
    User formModel = new();
    EditContext? editContext;
    bool isValidated = false;

    protected override void OnInitialized()
    {
        editContext = new(formModel);
        editContext.SetFieldCssClassProvider(new FormClassProvider());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.UpdateScroll();
        }
    }

    private void OnValidSudmit()
    {
        isValidated = true;
        Console.WriteLine("Valid form submitted!");
    }

    private void OnInvalidSubmit()
    {
        isValidated = true;
        Console.WriteLine("Invalid form submitted!");
    }

    private void OnClear()
    {
        isValidated = false;
        editContext = new(formModel);
        editContext.SetFieldCssClassProvider(new FormClassProvider());
        StateHasChanged();
    }
}
