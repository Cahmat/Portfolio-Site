@inject IJSRuntime JSRuntime

<Section id="what-can-i-do">
    <Splash ScrollSpeed="1" BackgroundScrollSpeed="-0.25" TitleScrollSpeed="0.5">
        <Background>
            <img src="/css/img/painted-canvas.jpg" class="filter-blur-2" loading="lazy" />
        </Background>
        <Title>
            What can I do?
        </Title>
    </Splash>

    <Container Class="m-block-0">
        <blockquote>
            With half a decade of professional experience and an unending passion for learning, anything I can't do, I'm eager to learn.
        </blockquote>
    </Container>

    <SectionHeader Title="Solutions" ContainerClass="bg-accent-1-7" TextClass="text-accent-1-1" />

    <Container Inline="true">
        <Tabs TabStyle="TabStyle.Card" Orientation="Orientation.Horizontal">
            <Tab Title="Front-End" Hoverable>
                Responsive and accessible web design with custom, professional controls. Clear UX and security for business-to-business, stylish and unforgettable for business-to-customer.
                <div class="flex row wrap">
                    <img src="/css/icons/html-5.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/css-3.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/less.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/sass.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/bootstrap.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/javascript.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/jquery-icon.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/express.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/react.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/xamarin.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/android-icon.svg" class="icon" loading="lazy" />
                </div>
            </Tab>
            <Tab Title="Back-End" Hoverable>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
                <div class="flex row wrap">
                    <img src="/css/icons/c-sharp.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/dotnet.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/nodejs-icon.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/azure.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/swagger.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/gatsby.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/graphql.svg" class="icon" loading="lazy"  />
                    <img src="/css/icons/mongodb.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/mysql.svg" class="icon" loading="lazy" />
                    <img src="/css/icons/oracle.svg" class="icon" loading="lazy" />
                </div>
            </Tab>
            <Tab Title=".NET" Hoverable>
                Cross-platform solutions for both front-end and back-end with MVC or Blazor.
            </Tab>
            <Tab Title="Web Design" Hoverable>
                Responsive and accessible web design with custom, professional controls. Clear UX and security for business-to-business, stylish and unforgettable for business-to-customer.
            </Tab>
            <Tab Title="Database Design" Hoverable>
                Relational databases built with scalability in mind, using anything from SQL Server to MongoDB. Secure password hashing, encryption of sensitive data, and protection from common attacks like SQL injection.
            </Tab>
        </Tabs>
    </Container>

    <SectionHeader Title="Examples" ContainerClass="bg-accent-2-7" TextClass="text-accent-2-1" />

    <Container>
        <div class="flex row wrap">
            <Card Orientation="Orientation.Vertical" Size="Size.Full">
@*                <CardImage>
                    <img src="https://loremflickr.com/1280/720" />
                </CardImage>*@
                <CardTitle>
                    <h5>Buttons</h5>
                </CardTitle>
                <CardBody>
                    <p>Normal:</p>
                    <div class="flex row wrap">
                        <button class="btn primary">Primary</button>
                        <button class="btn accent-1">Accent 1</button>
                        <button class="btn accent-2">Accent 2</button>
                        <button class="btn accent-3">Accent 3</button>
                        <button class="btn success">Success</button>
                        <button class="btn danger">Danger</button>
                    </div>
                    <p>Outline:</p>
                    <div class="flex row wrap">
                        <button class="btn primary outline">Primary</button>
                        <button class="btn accent-1 outline">Accent 1</button>
                        <button class="btn accent-2 outline">Accent 2</button>
                        <button class="btn accent-3 outline">Accent 3</button>
                        <button class="btn success outline">Success</button>
                        <button class="btn danger outline">Danger</button>
                    </div>
                    <p>Large:</p>
                    <div class="flex row wrap">
                        <button class="btn primary large">Primary</button>
                        <button class="btn accent-1 large">Accent 1</button>
                        <button class="btn accent-2 large">Accent 2</button>
                        <button class="btn accent-3 large">Accent 3</button>
                        <button class="btn success large">Success</button>
                        <button class="btn danger large">Danger</button>
                    </div>
                    <p>Small:</p>
                    <div class="flex row wrap">
                        <button class="btn primary small">Primary</button>
                        <button class="btn accent-1 small">Accent 1</button>
                        <button class="btn accent-2 small">Accent 2</button>
                        <button class="btn accent-3 small">Accent 3</button>
                        <button class="btn success small">Success</button>
                        <button class="btn danger small">Danger</button>
                    </div>
                </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Form Controls
                </CardTitle>
                <CardBody>
                    <p>
                    </p>
                    <div class="flex row wrap">
                        <EditForm EditContext="editContext" OnValidSubmit="OnValidSudmit" OnInvalidSubmit="OnInvalidSubmit" class="@((isValidated ? "validated" : ""))">
                            <DataAnnotationsValidator />

                            <FormField For="@(() => formModel.Email)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.Email" />
                            </FormField>

                            <FormField For="@(() => formModel.Password)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.Password" type="password" />
                            </FormField>

                            <FormField For="@(() => formModel.DateOfBirth)" Context="fieldId">
                                <InputDate id="@fieldId" @bind-Value="@formModel.DateOfBirth" TValue="DateOnly" />
                            </FormField>

                            <FormField For="@(() => formModel.PhoneNumber)" Context="fieldId">
                                <InputText id="@fieldId" @bind-Value="@formModel.PhoneNumber" />
                            </FormField>

                            <FormField For="@(() => formModel.RememberMe)" Context="fieldId" Inline="true">
                                <Checkbox id="fieldId" @bind-Value="@formModel.RememberMe" />
                            </FormField>

                            <FormField TItem="string" Context="fieldId">
                                <InputSelect TValue="string" @bind-Value="@selectValue">
                                    <option value="1">Option 1</option>
                                    <option value="2">Option 2</option>
                                    <option value="3">Option 3</option>
                                </InputSelect>
                            </FormField>

                            <button class="btn accent-1 small" type="submit">Submit</button>
                            <button class="btn primary small" type="reset" @onclick="OnClear">Clear</button>
                        </EditForm>
                    </div>
            </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Collapseables
                </CardTitle>
                <CardBody>
                    <p>
                    </p>
                    <div class="flex row wrap">
                    </div>
                </CardBody>
            </Card>

            <Card Size="Size.Full">
                <CardTitle>
                    Carousel + Gallery
                </CardTitle>
                <CardBody>
                    <p>
                        A lovely carousel component along with an image gallery. Each reacts to the other's state, with selection and drag-and-drop reordering included in the gallery!
                    </p>
                    <div class="flex row wrap">
                        <Carousel Items="slides" @bind-CurrentSlide="selectedSlide" ShowControls Wrap>
                            <ItemTemplate>
                                <img src="@context.ImageUrl" loading="lazy" />
                            </ItemTemplate>
                        </Carousel>
                        <Gallery Items="slides" @bind-SelectedItem="selectedSlide">
                            <ItemTemplate>
                                <img src="@context.ImageUrl" loading="lazy" draggable="false" />
                            </ItemTemplate>
                        </Gallery>
                    </div>
                </CardBody>
            </Card>
        </div>
    </Container>
</Section>

@code {
    User formModel = new();
    EditContext? editContext;
    bool isValidated = false;

    string selectValue;

    List<Slide> slides;
    Slide selectedSlide;

    protected override void OnInitialized()
    {
        editContext = new(formModel);
        editContext.SetFieldCssClassProvider(new FormClassProvider());

        slides = Slide.GetSlides();
        selectedSlide = slides.FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.UpdateScroll();
        }
    }

    private void OnValidSudmit()
    {
        isValidated = true;
        Console.WriteLine("Valid form submitted!");
    }

    private void OnInvalidSubmit()
    {
        isValidated = true;
        Console.WriteLine("Invalid form submitted!");
    }

    private void OnClear()
    {
        isValidated = false;
        editContext = new(formModel);
        editContext.SetFieldCssClassProvider(new FormClassProvider());
        StateHasChanged();
    }
}
