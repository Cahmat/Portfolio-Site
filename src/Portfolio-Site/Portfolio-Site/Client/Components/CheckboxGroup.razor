@typeparam TItem

<div class="card">
    @if (HeaderTemplate != null)
    {
        <div class="card-title">
            @HeaderTemplate
        </div>
    }

    <div class="card-body ipp-checkbox-group">
        @if (HasSelectAll)
        {
@*            <Checkbox>
                Select All
            </Checkbox>
            <Check TValue="bool" 
            Checked="@selectAllChecked" 
            Inline="@Inline"
            Indeterminate="@selectAllIndeterminate" 
            CheckedChanged="@(async (isChecked) => await OnSelectAll(isChecked))">Select All</Check>
*@
        }

@*        <Repeater Items="@Items">
            <Check TValue="bool" 
            Inline="@Inline"
            Checked="@SelectedItems.Contains(@context)" 
            CheckedChanged="@(async (isChecked) => await OnChecked(context, isChecked))">@ItemTemplate(context)</Check>
        </Repeater>
*@
</div>

    @if (FooterTemplate != null)
    {
        <div class="card-footer">
            @FooterTemplate
        </div>
    }
</div>

<style>
    .ipp-checkbox-group {
        max-height: calc(2rem * @MaxVisibleValues);
        overflow-block: auto;
    }

</style>


@code {
    [Parameter]
    public RenderFragment HeaderTemplate { get; set; } = null;
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = null;
    [Parameter]
    public RenderFragment FooterTemplate { get; set; } = null;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public List<TItem> SelectedItems { get; set; } = new List<TItem>();

    [Parameter]
    public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }

    [Parameter]
    public bool HasSelectAll { get; set; }

    [Parameter]
    public int MaxVisibleValues { get; set; } = 10;

    [Parameter]
    public bool Inline { get; set; } = false;

    private bool selectAllChecked = false;
    private bool selectAllIndeterminate = false;

    protected override void OnParametersSet()
    {
        SetIndeterminate();
    }

    private async Task OnChecked(TItem item, bool isChecked)
    {
        if (isChecked)
        {
            if (!SelectedItems.Contains(item))
            {
                SelectedItems.Add(item);
            }
        } else
        {
            if (SelectedItems.Contains(item))
            {
                SelectedItems.Remove(item);
            }
        }

        SetIndeterminate();

        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private async Task OnSelectAll(bool isChecked)
    {
        // If unchecked or indeterminate, select all.
        // Otherwise, if checked, deselect all.
        if (!selectAllChecked || selectAllIndeterminate)
        {
            SelectedItems.Clear();
            SelectedItems.AddRange(Items);
            selectAllChecked = true;
            selectAllIndeterminate = false;

        } else if (selectAllChecked)
        {
            SelectedItems.Clear();

            selectAllChecked = false;
            selectAllIndeterminate = false;
        }

        await SelectedItemsChanged.InvokeAsync(SelectedItems);
        StateHasChanged();
    }

    private void SetIndeterminate()
    {
        if (SelectedItems.Count == 0)
        {
            selectAllChecked = false;
            selectAllIndeterminate = false;
        } else if (SelectedItems.Count == Items.Count())
        {
            selectAllChecked = true;
            selectAllIndeterminate = false;
        }
        else
        {
            selectAllChecked = false;
            selectAllIndeterminate = true;
        }
    }
}
