@inject IJSRuntime JSRuntime

<div @ref="card" class="card @(Size.EnumToClass()) @(Orientation.EnumToClass()) @((ImagePosition.EnumToClass())) @Class" @attributes="@AdditionalAttributes">
    @if (CardImage != null)
    {
        <div @ref="cardImage" class="card-image">
            @CardImage
        </div>
    }

    @if (CardTitle != null)
    {
        <div class="card-title">
                @CardTitle
        </div>
    }

    @if (CardBody != null)
    {
        <div @ref="cardBody" class="card-body">
                @CardBody
        </div>
    }
</div>

@code {
    [Parameter]
    public RenderFragment? CardImage { get; set; }
    [Parameter]
    public RenderFragment? CardTitle { get; set; }
    [Parameter]
    public RenderFragment? CardBody { get; set; }

    [Parameter]
    public Size Size { get; set; }

    [Parameter]
    public Orientation Orientation { get; set; }

    [Parameter]
    public ImagePosition ImagePosition { get; set; } = ImagePosition.Left;

    [Parameter]
    public bool Animated { get; set; }

    [Parameter]
    public string TriggerStart { get; set; }

    [Parameter]
    public string TriggerEnd { get; set; }

    [Parameter]
    public double AnimatedImageSpeed { get; set; }

    [Parameter]
    public double AnimatedBodySpeed { get; set; }

    [Parameter]
    public bool Collapseable { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public string Class { get; set; }


    ElementReference card;
    ElementReference cardImage;
    ElementReference cardBody;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Animated)
        {
            await JSRuntime.InvokeVoidAsync("setUpGlideTrigger", card, cardImage, AnimatedImageSpeed, TriggerStart, TriggerEnd);
            await JSRuntime.InvokeVoidAsync("setUpGlideTrigger", card, cardBody, AnimatedBodySpeed, TriggerStart, TriggerEnd);
        }
    }
}
