@typeparam TItem

@inject IJSRuntime JSRuntime

<div class="carousel-wrapper">
    <div class="carousel">
        @if (ShowControls)
        {
            <img src="/css/icons/fi-xnslxl-chevron-solid.svg" class="controls left" @onclick="PreviousSlide" />
            <img src="/css/icons/fi-xnsrxl-chevron-solid.svg" class="controls right" @onclick="NextSlide" />
        }

        @foreach (TItem item in Items)
        {
            <div @ref="itemElements[item]" class="carousel-slide @GetSlideClass(item)">
                @if (ItemTemplate != null)
                {
                    @ItemTemplate(item)
                }
            </div>
        }

        @if (ShowProgress)
        {
            <div class="carousel-progress">
                @foreach (TItem item in Items)
                {
                    <span class="@GetSlideClass(item)"></span>
                }
            </div>
        }
    </div>
    @if (FooterTemplate != null) {
        @FooterTemplate(CurrentSlide)
    }
</div>

@code {
    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? FooterTemplate { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter]
    public bool ShowControls { get; set; } = true;

    [Parameter]
    public bool ShowProgress { get; set; } = true;

    [Parameter]
    public TItem CurrentSlide {
        get
        {
            return currentSlide;
        }
        set {
            SetCurrentSlide(value);
        }
    }

    [Parameter]
    public EventCallback<TItem> CurrentSlideChanged { get; set; }

    private TItem? currentSlide;
    private TItem? previousSlide;

    private int currentSlideIndex => Items.IndexOf(CurrentSlide);
    private int previousSlideIndex => Items.IndexOf(previousSlide);

    private Dictionary<TItem, ElementReference> itemElements = new();

    bool slideChanged = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (slideChanged)
        {
            slideChanged = false;

            await UpdateSlideAnimations();
        }
    }


    public async Task SelectSlide(int slide)
    {
        await SetCurrentSlide(slide);
        StateHasChanged();
    }

    public async Task PreviousSlide()
    {
        await SetCurrentSlide(GetPreviousIndex());
    }

    public async Task NextSlide()
    {
        await SetCurrentSlide(GetNextIndex());
    }

    private async Task SetCurrentSlide(int slideIndex)
    {
        TItem? newSlide = Items.ElementAtOrDefault(slideIndex);

        if (newSlide == null)
        {
            // If going outside of bounds, either wraps or clamps.
            if (slideIndex >= Items.Count)
            {

                newSlide = (Wrap) ? Items.First() : CurrentSlide;
            }

            if (slideIndex < 0)
            {
                newSlide = (Wrap) ? Items.Last() : CurrentSlide;
            }
        }

        await SetCurrentSlide(newSlide);
    }

    private async Task SetCurrentSlide(TItem slide)
    {
        if (!Items.Contains(slide) || IsCurrent(slide))
            return;

        // Set current slide to slide out, left or right depending on if the new slide is before or after.

        previousSlide = CurrentSlide;
        currentSlide = slide;

        slideChanged = true;
        await CurrentSlideChanged.InvokeAsync(CurrentSlide);

        StateHasChanged();
    }

    private async Task UpdateSlideAnimations()
    {
        ElementReference[] animatingElements = new ElementReference[2];
        string[] animatingClasses = new string[2];

        if (previousSlide != null && itemElements.TryGetValue(previousSlide, out var previousSlideElement))
        {
            animatingElements[0] = previousSlideElement;
            animatingClasses[0] = GetOutAnim();
        }

        if (itemElements.TryGetValue(CurrentSlide, out var currentSlideElement))
        {
            animatingElements[1] = currentSlideElement;
            animatingClasses[1] = GetInAnim();
        }

        await JSRuntime.ExecuteAnimationOnce(animatingElements, animatingClasses);
    }

    private string GetInAnim()
    {
        if (MathF.Abs(currentSlideIndex - previousSlideIndex) > 1)
        {
            return "slide-in-down";
        }

        if (previousSlideIndex < currentSlideIndex)
        {
            return "slide-in-right";
        }

        if (previousSlideIndex > currentSlideIndex)
        {
            return "slide-in-left";
        }

        return "";
    }

    private string GetOutAnim()
    {
        if (MathF.Abs(currentSlideIndex - previousSlideIndex) > 1)
        {
            return "slide-out-down";
        }

        if (previousSlideIndex < currentSlideIndex)
        {
            return "slide-out-left";
        }

        if (previousSlideIndex > currentSlideIndex)
        {
            return "slide-out-right";
        }

        return "";
    }

    private string GetSlideClass(TItem item)
    {
        if (IsPrevious(item))
        {
            return "previous";
        } else if (IsCurrent(item))
        {
            return "current";
        } else if (IsNext(item))
        {
            return "next";
        }
        return "";
    }

    private int GetPreviousIndex()
    {
        int prevIndex = currentSlideIndex - 1;

        if (prevIndex < 0)
            prevIndex = Items.Count - 1;

        return prevIndex;
    }

    private int GetNextIndex()
    {
        int nextIndex = currentSlideIndex + 1;

        if (nextIndex >= Items.Count)
            nextIndex = 0;

        return nextIndex;
    }

    private bool IsPrevious(TItem item) => Items.IndexOf(item) == GetPreviousIndex();
    private bool IsCurrent(TItem item) => Items.IndexOf(item) == currentSlideIndex;
    private bool IsNext(TItem item) => Items.IndexOf(item) == GetNextIndex();

}
