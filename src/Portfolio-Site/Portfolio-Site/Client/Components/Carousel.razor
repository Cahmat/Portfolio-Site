@typeparam TItem

<div class="carousel-wrapper">
    <div class="carousel">
        @if (ShowControls)
        {
            <img src="/css/icons/fi-xnslxl-chevron-solid.svg" class="controls left" @onclick="PreviousSlide" />
            <img src="/css/icons/fi-xnsrxl-chevron-solid.svg" class="controls right" @onclick="NextSlide" />
        }
        @foreach (TItem item in Items)
        {
            <div class="carousel-slide @GetSlideClass(item)">
                @if (ItemTemplate != null)
                {
                    @ItemTemplate(item)
                }
            </div>
        }
        @if (ShowProgress)
        {
            <div class="carousel-progress">
                @foreach (TItem item in Items)
                {
                    <span class="@GetSlideClass(item)"></span>
                }
            </div>
        }
    </div>
    @if (FooterTemplate != null) {
        @FooterTemplate(CurrentSlide)
    }
</div>

@code {
    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? FooterTemplate { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter]
    public bool ShowControls { get; set; } = true;

    [Parameter]
    public bool ShowProgress { get; set; } = true;

    [Parameter]
    public TItem CurrentSlide { get; set; } = default(TItem);

    [Parameter]
    public EventCallback<TItem> CurrentSlideChanged { get; set; }

    private int currentSlideIndex => Items.IndexOf(CurrentSlide);

    public async Task SelectSlide(int slide)
    {
        await SetCurrentSlide(slide);
        StateHasChanged();
    }

    public async Task PreviousSlide()
    {
        await SetCurrentSlide(currentSlideIndex - 1);
    }

    public async Task NextSlide()
    {
        await SetCurrentSlide(currentSlideIndex + 1);
    }

    private async Task SetCurrentSlide(TItem slide)
    {
        if (!Items.Contains(slide))
            return;

        int slideIndex = Items.IndexOf(slide);

        // If going outside of bounds, either wraps or clamps.
        if (slideIndex >= Items.Count())
        {

            slide = (Wrap) ? Items.First() : CurrentSlide;
        }

        if (slideIndex < 0)
        {
            slide = (Wrap) ? Items.Last() : CurrentSlide;
        }

        CurrentSlide = slide;
        await CurrentSlideChanged.InvokeAsync(CurrentSlide);
    }

    private async Task SetCurrentSlide(int slideIndex)
    {
        TItem newSlide = Items.ElementAtOrDefault(slideIndex);

        // If going outside of bounds, either wraps or clamps.
        if (slideIndex >= Items.Count())
        {

            newSlide = (Wrap) ? Items.First() : CurrentSlide;
        }

        if (slideIndex < 0)
        {
            newSlide = (Wrap) ? Items.Last() : CurrentSlide;
        }

        CurrentSlide = newSlide;
        await CurrentSlideChanged.InvokeAsync(CurrentSlide);
    }

    private string GetSlideClass(TItem item)
    {
        if (IsPrevious(item))
        {
            return "previous";
        } else if (IsCurrent(item))
        {
            return "current";
        } else if (IsNext(item))
        {
            return "next";
        }
        return "";
    }

    private bool IsPrevious(TItem item) => Items.IndexOf(item) == currentSlideIndex - 1;
    private bool IsCurrent(TItem item) => Items.IndexOf(item) == currentSlideIndex;
    private bool IsNext(TItem item) => Items.IndexOf(item) == currentSlideIndex + 1;
}
