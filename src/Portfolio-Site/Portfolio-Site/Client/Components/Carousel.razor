@typeparam TItem

<div class="carousel-wrapper">
    <div class="carousel">
        @if (ShowControls)
        {
            <img src="/css/icons/fi-xnslxl-chevron-solid.svg" class="controls left" @onclick="PreviousSlide" />
            <img src="/css/icons/fi-xnsrxl-chevron-solid.svg" class="controls right" @onclick="NextSlide" />
        }
        @foreach (TItem item in Items)
        {
            <div class="carousel-slide @GetSlideClass(item)">
                @ItemTemplate(item)
            </div>
        }
    </div>
    @if (FooterTemplate != null) {
        @FooterTemplate(Items.ElementAtOrDefault(CurrentSlide))
    }
</div>

@code {
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = null;

    [Parameter]
    public RenderFragment<TItem>? FooterTemplate { get; set; } = null;

    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter]
    public bool ShowControls { get; set; } = true;

    [Parameter]
    public int CurrentSlide { get; set; } = 0;

    [Parameter]
    public EventCallback<int> CurrentSlideChanged { get; set; }

    private int _currentSlide;

    public async Task SelectSlide(int slide)
    {
        await SetCurrentSlide(slide);
        StateHasChanged();
    }

    public async Task PreviousSlide()
    {
        await SetCurrentSlide(CurrentSlide - 1);
    }

    public async Task NextSlide()
    {
        await SetCurrentSlide(CurrentSlide + 1);
    }

    private async Task SetCurrentSlide(int slide)
    {
        _currentSlide = slide;

        // If going outside of bounds, either wraps or clamps.
        if (_currentSlide >= Items.Count())
        {
            _currentSlide = (Wrap) ? 0 : Items.Count() - 1;
        }

        if (_currentSlide < 0)
        {
            _currentSlide = (Wrap) ? Items.Count() - 1 : 0;
        }

        CurrentSlide = _currentSlide;
        await CurrentSlideChanged.InvokeAsync(CurrentSlide);
    }

    private string GetSlideClass(TItem item)
    {
        if (IsPrevious(item))
        {
            return "previous";
        } else if (IsCurrent(item))
        {
            return "current";
        } else if (IsNext(item))
        {
            return "next";
        }
        return "";
    }

    private bool IsPrevious(TItem item) => Items.IndexOf(item) == CurrentSlide - 1;
    private bool IsCurrent(TItem item) => Items.IndexOf(item) == CurrentSlide;
    private bool IsNext(TItem item) => Items.IndexOf(item) == CurrentSlide + 1;
}
