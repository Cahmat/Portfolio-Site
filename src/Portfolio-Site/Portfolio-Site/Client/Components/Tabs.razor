<CascadingValue Value="this">
    <div class="@GetContainerClass() @Class" @attributes="@AdditionalAttributes">
        <div class="tabs-headers @GetHeaderGroupClass()">
            @foreach (var tab in TabList)
            {
                <button class="@GetHeaderClass() @GetActiveClass(tab)" @onclick="@(() => TabClicked(tab))" @onmouseover="@(() => TabHovered(tab))" disabled="@tab.Disabled">
                    @if (tab.HeaderTemplate != null)
                    {
                        @tab.HeaderTemplate
                    } else
                    {
                        @tab.Title
                    }
                </button>
            }
        </div>

        <div class="tab-content @GetContentClass()">
            @ChildContent
        </div>
    </div>
</CascadingValue>



@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public TabStyle TabStyle { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    public List<Tab> TabList { get; set; } = new();
    public Tab ActiveTab { get; set; }

    public void Add(Tab tab)
    {
        if (TabList != null && !TabList.Contains(tab))
        {
            TabList.Add(tab);
            if (TabList.Count == 1)
            {
                ActiveTab = tab;
            }

            StateHasChanged();
        }
    }

    public void SelectTab(Tab tab)
    {
        if (!tab.Disabled)
            ActiveTab = tab;
    }

    public void TabClicked(Tab tab)
    {
        if (tab.Clickable)
            SelectTab(tab);
    }

    public void TabHovered(Tab tab)
    {
        if (tab.Hoverable)
            SelectTab(tab);
    }

    public string GetContainerClass()
    {
        switch (TabStyle)
        {
            case TabStyle.Container: return "tabs-container";
            case TabStyle.Card: return "tabs-card";
            default: return "tab-container";
        }
    }

    public string GetHeaderGroupClass()
    {
        switch (TabStyle)
        {
            case TabStyle.Container: return "tabs-container-headers";
            case TabStyle.Card: return "tabs-card-headers";
            default: return "tabs-container-headers";
        }
    }

    public string GetHeaderClass()
    {
        switch (TabStyle)
        {
            case TabStyle.Container: return "tabs-container-header";
            case TabStyle.Card: return "tabs-card-header";
            default: return "tabs-container-header";
        }
    }

    public string GetContentClass()
    {
        switch (TabStyle)
        {
            case TabStyle.Container: return "tabs-container-content";
            case TabStyle.Card: return "tabs-card-content";
            default: return "tabs-container-content";
        }
    }

    public string GetActiveClass(Tab tab)
    {
        if (ActiveTab == tab)
            return "selected";

        return "";
    }
}
