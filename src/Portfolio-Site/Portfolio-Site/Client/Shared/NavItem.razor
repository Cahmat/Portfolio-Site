@using PortfolioSite.Client.Helpers

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<li @attributes="@AdditionalAttributes">
    <a class="nav-link @GetActive(Destination, NavLinkMatch.All)" @onclick="@((args) => GoToDestination(args))" data-scroll-to="@Destination">
        @ChildContent
    </a>
</li>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public bool IsDefault { get; set; } = false;

    [Parameter]
    public bool IsLink { get; set; } = true;

    [Parameter]
    public string Destination { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();

        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }

    string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "";

    async Task GoToDestination(MouseEventArgs args)
    {
        if (IsLink)
        {
            NavigationManager.NavigateTo(Destination);
        } else
        {
            await JSRuntime.ScrollToElement(Destination);
        }
    }
}
